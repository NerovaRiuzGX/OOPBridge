void Host::score()
{
	int BasicScore,RewardScore,DblScore,ExceedScore,Mytrick,PunishScore;
	bool Vulner;
	if(declarer_position%2==0) 
		{
			Vulner=ns_vulnerable;
			Mytrick=ns_trick;
		}	
	else 
	{
		Vulner=ew_vulnerable;
		Mytrick=ew_trick;
	}
	if(Mytrick>= contract_trick)
	{
		if(contract_suit==0 ||contract_suit==1)				//Clubs=0 , Diamonds=1 , Hearts=2 , Spades=3 , NT=4;
		{
			BasicScore=    contract_dbl*( (contract_trick-6)*20 );		//BasicScore 計算牌礅分數
		}
		else if(contract_suit==2 || contract_suit==3)
		{
			BasicScore=    contract_dbl*( (contract_trick-6)*30 );
		}
		else if(contract_suit==4)
		{
			BasicScore=    contract_dbl*( ( 40+(contract_trick-7)*30) );
		}
		cout<<"BasicScore : "<<BasicScore<<endl;
		if(Vulner==false)
		{	
			if(BasicScore>100) RewardScore=300;		//RewardScore 計算線位獎分
			else RewardScore=50;
			if(Mytrick==13 && contract_trick==13)	RewardScore=RewardScore+1000;
			else if(Mytrick==12 && contract_trick==12) RewardScore=RewardScore+500;	
		}
		else
		{
			if(BasicScore>100) RewardScore=500;
			else RewardScore=50;
			if(Mytrick==13 && contract_trick==13)	RewardScore=RewardScore+1500;
			else if(Mytrick==12 && contract_trick==12) RewardScore=RewardScore+750;
		}
		cout<<"RewardScore : "<<RewardScore<<endl;
		if( Mytrick>=contract_trick && contract_dbl==2 )		DblScore=50;		// DblScore計算 Dbl獎分
		else if( Mytrick>=contract_trick && contract_dbl==4 )	DblScore=100;
		else DblScore=0;
		cout<<"DblScore : "<<DblScore<<endl;

		if(Mytrick-contract_trick>0)
		{
			if(contract_dbl==1)
			{
					if(contract_suit==2 || contract_suit==3 || contract_suit==4)
					{
						ExceedScore = 30*(Mytrick-contract_trick);
					}
					else 
					{
						ExceedScore = 20*(Mytrick-contract_trick);
					}
			}
			else if(Vulner==false)							// ExceedScore 計算 超礅分數
			{
				ExceedScore = (Mytrick-contract_trick)*50*contract_dbl;
			}
			else
			{
				ExceedScore = (Mytrick-contract_trick)*100* contract_dbl;
			}
		}
		else ExceedScore=0;
		cout<<"ExceedScore : "<<ExceedScore<<endl;
		if(declarer_position%2==0)	//最後分數計算
		{
			ns_point += BasicScore + RewardScore + DblScore + ExceedScore; 
			ew_point = ns_point*-1;
		}
		else
		{
			ew_point += BasicScore + RewardScore + DblScore + ExceedScore; 
			ns_point = ew_point*-1;
		}
	}
	else
	{
		if(contract_dbl==1)				//PunishScore 計算 罰分
		{
			if(Vulner==true)	PunishScore=(contract_trick-Mytrick)*100;
			else PunishScore=(contract_trick-Mytrick)*50;
		}
		else if (contract_dbl==2)	
		{
			if(Vulner==true)
			{
				if(contract_trick-Mytrick>=1)
				{
					PunishScore=200;
				}
				if(contract_trick-Mytrick>=2)
				{
					PunishScore+=(contract_trick-Mytrick-1)*300;
				}
			}
			else
			{
				if(contract_trick-Mytrick>=1) PunishScore=100;
				if (contract_trick-Mytrick>=2 ) PunishScore+=200;
				if (contract_trick-Mytrick>=3) PunishScore+=200;
				if (contract_trick-Mytrick>=4) PunishScore+=(contract_trick-Mytrick-3)*300;
			}
		}
		else if(contract_dbl==4)
		{
			if(Vulner==true)
			{
				if(contract_trick-Mytrick>=1) PunishScore=400;
				if(contract_trick-Mytrick>=2) PunishScore+=(contract_trick-Mytrick-1)*600;
			}
			else
			{
				if(contract_trick-Mytrick>=1) PunishScore=200;
				if(contract_trick-Mytrick>=2) PunishScore+=400;
				if(contract_trick-Mytrick>=3) PunishScore+=400;
				if(contract_trick-Mytrick>=4) PunishScore+=(contract_trick-Mytrick-3)*600;
			}
		
		}
		if(declarer_position%2==0) 
			{
				ns_point += PunishScore*-1;			//最後分數計算
				ew_point = ns_point*-1;			
			}
		else 
		{
			ew_point+=PunishScore*-1;
			ns_point=ew_point*-1;
		}
	}

	cout<<"NS_Point : "<<ns_point<<endl
		<<"EW_Point : "<<ew_point<<endl;
}